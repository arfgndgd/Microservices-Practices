
API OLUÞTURMA

Catalog
FreeCourse.Services.Catalog
MongoDB.Driver indir.
	Models
		Classlarý aç

Shared
FreeCourse.Shared
	Dtos
		Classlarý aç

Catalog
FreeCourse.Services.Catalog
	Dtos
		Classlarý aç
	Mapping
		Classlarý aç

AutoMapper.Extensions.Microsoft.DependencyInjection kütüphanesini indir
	Startup.cs => ConfigureServices => addAutoMapper();

Mapping için General Mapping classýnda ReverseMap iþlemlerine uygun classlarý yazz

Veritabaný ile ilgili iþlemler için appsettings.json klasöründeki DatabaseSettings jsonlarýna göre propertyler yazýyoruz.
	Settings
		appsettings.json içindeki DatabaseSettings'in içindeki tanýmlamalara özel interface ve class açtýk
	
	Startup.cs => DatabaseSettings classý için services.Configure
				  IDatabaseSettings interfacei için services.AddSingleton

Services klasörünü aç
	CategoryService => ICategoryService
	CourseService => ICourseService
		Startup.cs => services.AddScoped<>

Controllers
	CourseController : CustomBaseController

Shared
FreeCourse.Shared
	ControllerBases
		CustomBaseController (Bu class ControllerBase'den miras almak zorunda ancak Shared projesi yapý itibari ile nuget olarak müsade etmez. Edit Project File ile "Microsoft.AspNetCore.App" eklememiz lazým)


Catalog
FreeCourse.Services.Catalog
Controllers
	CategoryController

	*** PORTAINER => Pcdeki containerlarý, imajlarý yönetmek için kullanýlýr ***

	 Portainer.io > Install > Install Guide > Community Edition > Docker
				PowerShell aç > 1.Step > docker volume create portainer_data
								2.Step > docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce		
		                        3.Step > localhost:9000 


MONGO'yu kullanacaðýmýz için portainer içinde ayarlamalarý yapýp Mongo'yu container olarak ayaða kaldýracaðýz
	App Templates > Mongo
		Port Mapping yapýyoruz host == container (27017) (baþka bir þeye ellemeye gerek yok tek database ismi verdik)
			Deploy the container (containerýn ayaða kalkmasýný bekliyoruz eðer yoksa imageý dockerhubtan çekecek(üyelik ister))
			
MongoDb Compass aç 
	Yeni baðlantý için appsettins.json içinde belirlediðimiz ConnectionStringi yapýþtýr "mongodb://localhost:27017" 

			**** TEST YAPILDI (swaggerda çalýþýyor)****


IdentityServer(Microservice)
IdentityServer github > IdentityServer4.Templates > dotnet new -i identityserver4.templates (terminale yaz)
Proje dosyasý içine IdentityServer klasörünü ekliyoruz. 
	Dosya yolunu kopyala 
	Terminal > clear > dosya yolunu yapýþtýr > Enter > dotnet new is4aspid --name FreeCourse.IdentityServer
	**yeni bir proje oluþmuþ oldu
			Bu projeyi IdentityServer klasörü açýp projemize ekliyoruz > add existing project...

	Portainer > app templates > sql server(linux) > isim ver, þifre ver 
													host => container ayný 1433

FreeCourse.IdentityServer 
**Dependencies>Packages>Authentication sürümüne göre göre nuget olarak ef core sql server indir ()

	Data içinde Migrationý sil > appsetting.json içinde DefaultConnectioný IdentityServer için düzenle (Portainer > Sql Server)
	Startup.cs > ConfigureServices > services.SqlLite sil service.UseSqlServer ekle 
	Program.cs içinde metodda try catch içindeki hazýr if yapýlarýný sil ve kendi yapýný yaz
	Startup Project olarak FreeCourse.IdentityServer seç > Package Manager Consoleda da seç 
			add-migration name  >  update-database 
				DBeaver (artý iþareti ile ekle)

ENDPOINT oluþturma > Singup endpoint
	Controllers > UserController (API)
	Dtos > SingupDto

 **** JWT (Json Web Token) => Token daðýtan identityServer token alan Aps.Net Core Mvc
		Config.cs
		ApiResource, IdentityResource, ApiScope ,Client 
			Startup.cs => ApiResource sonradan eklendiði için burada tanýmlama (IdentityResources'ýn altýna)
				.AddInMemoryApiResources(Config.ApiResources)

****
Token testi için Postman "https://localhost:5001/connect/token" bu urlye "Post" türünde "Body" sekmesinde x-www-form..dan istek yolla (identity server docs > endpoint > client_id, secret, client_credentials)
****

UserController/Signup endpoint testi
	UserController => [Authorize(LocalApi.PolicyName)] +  [Route("api/[controller]/[action]")]
	Startup.cs => services.AddLocalApiAuthentication(); + app.Authentication	
		
		***Postman test*** (Projeyi çalýþtýr)
			url = https://localhost:5001/api/user/signup (POST)
			body > json > yeni user ekle (username, password, city, email)
			authorization > Type > OAuth2.O > tokeni yapýþtýr
			SENDING > DBeaver yeni kayýt geldi

CATALOG.API koruma altýna alma
FreeCourse.Services.Catalog
	Manage Nuget => jwtBearer
	appsettings.json >   "IdentityServerURL": "http://localhost:5001"
	Startup.cs => ConfigureServices > services.AddAuthentication
				  Configure >  app.UseAuthentication();	 
			
			IdentityServer projesinde > Properties > launchSettings.json > url'yi http'ye çevir
	
	**** TEST > Solution sað týk > Set Startup Projects > Multiple startup project > IdentityServer & Catalog
				Postman > https://localhost:5001/ GET Sending

				
